/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisteredEngine A registered engine's connection and authentication settings.
type RegisteredEngine struct {
	Id *int64 `json:"id,omitempty"`
	Name string `json:"name"`
	Hostname string `json:"hostname"`
	// Id of the primary user for this engine. The primary user must be an engine admin.
	PrimaryUser *int64 `json:"primary_user,omitempty"`
	// Allow connections to the engine over HTTPs without validating the TLS certificate. Even though the connection to the engine might be performed over HTTPs, setting this property eliminates the protection against a man-in-the-middle attach for connections to this engine. Instead, consider creating a truststore with a Certificate Authority to validate the engine's certificate, and set the truststore_path propery. 
	InsecureSsl *bool `json:"insecure_ssl,omitempty"`
	// Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs. Setting this value must only be done if the TLS certificate of the engine does not match the hostname, and the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this engine. This is ignored if insecure_ssl is set. 
	UnsafeSslHostnameCheck *bool `json:"unsafe_ssl_hostname_check,omitempty"`
	// File name of a truststore which can be used to validate the TLS certificate of the engine. The truststore must be available at /etc/config/certs/<truststore_filename> 
	TruststoreFilename NullableString `json:"truststore_filename,omitempty"`
	// Password to read the truststore. 
	TruststorePassword NullableString `json:"truststore_password,omitempty"`
	// the status of the engine 
	Status NullableString `json:"status,omitempty"`
}

// NewRegisteredEngine instantiates a new RegisteredEngine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredEngine(name string, hostname string) *RegisteredEngine {
	this := RegisteredEngine{}
	this.Name = name
	this.Hostname = hostname
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// NewRegisteredEngineWithDefaults instantiates a new RegisteredEngine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredEngineWithDefaults() *RegisteredEngine {
	this := RegisteredEngine{}
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisteredEngine) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisteredEngine) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RegisteredEngine) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *RegisteredEngine) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisteredEngine) SetName(v string) {
	o.Name = v
}

// GetHostname returns the Hostname field value
func (o *RegisteredEngine) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *RegisteredEngine) SetHostname(v string) {
	o.Hostname = v
}

// GetPrimaryUser returns the PrimaryUser field value if set, zero value otherwise.
func (o *RegisteredEngine) GetPrimaryUser() int64 {
	if o == nil || o.PrimaryUser == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryUser
}

// GetPrimaryUserOk returns a tuple with the PrimaryUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetPrimaryUserOk() (*int64, bool) {
	if o == nil || o.PrimaryUser == nil {
		return nil, false
	}
	return o.PrimaryUser, true
}

// HasPrimaryUser returns a boolean if a field has been set.
func (o *RegisteredEngine) HasPrimaryUser() bool {
	if o != nil && o.PrimaryUser != nil {
		return true
	}

	return false
}

// SetPrimaryUser gets a reference to the given int64 and assigns it to the PrimaryUser field.
func (o *RegisteredEngine) SetPrimaryUser(v int64) {
	o.PrimaryUser = &v
}

// GetInsecureSsl returns the InsecureSsl field value if set, zero value otherwise.
func (o *RegisteredEngine) GetInsecureSsl() bool {
	if o == nil || o.InsecureSsl == nil {
		var ret bool
		return ret
	}
	return *o.InsecureSsl
}

// GetInsecureSslOk returns a tuple with the InsecureSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetInsecureSslOk() (*bool, bool) {
	if o == nil || o.InsecureSsl == nil {
		return nil, false
	}
	return o.InsecureSsl, true
}

// HasInsecureSsl returns a boolean if a field has been set.
func (o *RegisteredEngine) HasInsecureSsl() bool {
	if o != nil && o.InsecureSsl != nil {
		return true
	}

	return false
}

// SetInsecureSsl gets a reference to the given bool and assigns it to the InsecureSsl field.
func (o *RegisteredEngine) SetInsecureSsl(v bool) {
	o.InsecureSsl = &v
}

// GetUnsafeSslHostnameCheck returns the UnsafeSslHostnameCheck field value if set, zero value otherwise.
func (o *RegisteredEngine) GetUnsafeSslHostnameCheck() bool {
	if o == nil || o.UnsafeSslHostnameCheck == nil {
		var ret bool
		return ret
	}
	return *o.UnsafeSslHostnameCheck
}

// GetUnsafeSslHostnameCheckOk returns a tuple with the UnsafeSslHostnameCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetUnsafeSslHostnameCheckOk() (*bool, bool) {
	if o == nil || o.UnsafeSslHostnameCheck == nil {
		return nil, false
	}
	return o.UnsafeSslHostnameCheck, true
}

// HasUnsafeSslHostnameCheck returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUnsafeSslHostnameCheck() bool {
	if o != nil && o.UnsafeSslHostnameCheck != nil {
		return true
	}

	return false
}

// SetUnsafeSslHostnameCheck gets a reference to the given bool and assigns it to the UnsafeSslHostnameCheck field.
func (o *RegisteredEngine) SetUnsafeSslHostnameCheck(v bool) {
	o.UnsafeSslHostnameCheck = &v
}

// GetTruststoreFilename returns the TruststoreFilename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetTruststoreFilename() string {
	if o == nil || o.TruststoreFilename.Get() == nil {
		var ret string
		return ret
	}
	return *o.TruststoreFilename.Get()
}

// GetTruststoreFilenameOk returns a tuple with the TruststoreFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTruststoreFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TruststoreFilename.Get(), o.TruststoreFilename.IsSet()
}

// HasTruststoreFilename returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTruststoreFilename() bool {
	if o != nil && o.TruststoreFilename.IsSet() {
		return true
	}

	return false
}

// SetTruststoreFilename gets a reference to the given NullableString and assigns it to the TruststoreFilename field.
func (o *RegisteredEngine) SetTruststoreFilename(v string) {
	o.TruststoreFilename.Set(&v)
}
// SetTruststoreFilenameNil sets the value for TruststoreFilename to be an explicit nil
func (o *RegisteredEngine) SetTruststoreFilenameNil() {
	o.TruststoreFilename.Set(nil)
}

// UnsetTruststoreFilename ensures that no value is present for TruststoreFilename, not even an explicit nil
func (o *RegisteredEngine) UnsetTruststoreFilename() {
	o.TruststoreFilename.Unset()
}

// GetTruststorePassword returns the TruststorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetTruststorePassword() string {
	if o == nil || o.TruststorePassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.TruststorePassword.Get()
}

// GetTruststorePasswordOk returns a tuple with the TruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTruststorePasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TruststorePassword.Get(), o.TruststorePassword.IsSet()
}

// HasTruststorePassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTruststorePassword() bool {
	if o != nil && o.TruststorePassword.IsSet() {
		return true
	}

	return false
}

// SetTruststorePassword gets a reference to the given NullableString and assigns it to the TruststorePassword field.
func (o *RegisteredEngine) SetTruststorePassword(v string) {
	o.TruststorePassword.Set(&v)
}
// SetTruststorePasswordNil sets the value for TruststorePassword to be an explicit nil
func (o *RegisteredEngine) SetTruststorePasswordNil() {
	o.TruststorePassword.Set(nil)
}

// UnsetTruststorePassword ensures that no value is present for TruststorePassword, not even an explicit nil
func (o *RegisteredEngine) UnsetTruststorePassword() {
	o.TruststorePassword.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *RegisteredEngine) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *RegisteredEngine) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *RegisteredEngine) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *RegisteredEngine) UnsetStatus() {
	o.Status.Unset()
}

func (o RegisteredEngine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.PrimaryUser != nil {
		toSerialize["primary_user"] = o.PrimaryUser
	}
	if o.InsecureSsl != nil {
		toSerialize["insecure_ssl"] = o.InsecureSsl
	}
	if o.UnsafeSslHostnameCheck != nil {
		toSerialize["unsafe_ssl_hostname_check"] = o.UnsafeSslHostnameCheck
	}
	if o.TruststoreFilename.IsSet() {
		toSerialize["truststore_filename"] = o.TruststoreFilename.Get()
	}
	if o.TruststorePassword.IsSet() {
		toSerialize["truststore_password"] = o.TruststorePassword.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredEngine struct {
	value *RegisteredEngine
	isSet bool
}

func (v NullableRegisteredEngine) Get() *RegisteredEngine {
	return v.value
}

func (v *NullableRegisteredEngine) Set(val *RegisteredEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEngine(val *RegisteredEngine) *NullableRegisteredEngine {
	return &NullableRegisteredEngine{value: val, isSet: true}
}

func (v NullableRegisteredEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


